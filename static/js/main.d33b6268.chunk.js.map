{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","App","state","data","promedio","btn","modalInsertar","modalEliminar","form","id","nombre","apellido","fecha","tipoModal","peticionGet","axios","get","then","response","setState","catch","error","console","log","message","p","peticionPost","a","post","peticionPut","put","peticionDelete","delete","seleccionarCliente","cliente","cli_fec_nac","substring","cli_id","cli_nom","cli_ape","handleChange","e","persist","target","name","value","this","className","class","onClick","map","index","split","key","icon","faEdit","faTrashAlt","Modal","isOpen","ModalHeader","style","display","float","ModalBody","htmlFor","type","readOnly","onChange","required","ModalFooter","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d33b6268.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\n\n// const url = \"http://localhost:3050/\";\nconst url = \"http://184.73.151.126:80/\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    promedio: \"\",\n    btn: true,\n    modalInsertar: false,\n    modalEliminar: false,\n    form: {\n      id: \"\",\n      nombre: \"\",\n      apellido: \"\",\n      fecha: \"\",\n      tipoModal: \"\",\n    },\n  };\n\n  peticionGet = () => {\n    axios\n      .get(url + \"clientes\")\n      .then((response) => {\n        this.setState({ data: response.data });\n      })\n      .catch((error) => {\n        console.log(error.message);\n      });\n\n    axios\n      .get(url + \"promedio\")\n      .then((response) => {\n        this.setState({ promedio: response.data[0].p });\n        console.log(\"promedio\", response.data[0].p);\n      })\n      .catch((error) => {\n        console.log(error.message);\n      });\n    console.log(\"en get\", this.state.data);\n  };\n\n  peticionPost = async () => {\n    console.log(\"estamos en insertar\", this.state.form);\n    await axios\n      .post(url + \"agregar\", this.state.form)\n      .then((response) => {\n        console.log(\"response\", response);\n        this.modalInsertar();\n        this.peticionGet();\n      })\n      .catch((error) => {\n        console.log(error.message);\n      });\n  };\n\n  peticionPut = () => {\n    console.log(\"estamos en insertar\", this.state.form);\n    axios\n      .put(url + \"editar/\" + this.state.form.id, this.state.form)\n      .then((response) => {\n        console.log(\"response\", response);\n        this.modalInsertar();\n        this.peticionGet();\n      });\n  };\n\n  peticionDelete = () => {\n    axios.delete(url + \"eliminar/\" + this.state.form.id).then((response) => {\n      this.setState({ modalEliminar: false });\n      this.peticionGet();\n    });\n  };\n\n  modalInsertar = () => {\n    this.setState({ modalInsertar: !this.state.modalInsertar });\n  };\n\n  seleccionarCliente = (cliente) => {\n    console.log(\"cliente.cli_fec_nac\", cliente.cli_fec_nac.substring(0, 10));\n    this.setState({\n      tipoModal: \"actualizar\",\n      form: {\n        id: cliente.cli_id,\n        nombre: cliente.cli_nom,\n        apellido: cliente.cli_ape,\n        fecha: cliente.cli_fec_nac.substring(0, 10),\n      },\n    });\n  };\n\n  handleChange = async (e) => {\n    e.persist();\n    await this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    });\n    if (\n      this.state.form.nombre == null ||\n      this.state.form.apellido == null ||\n      this.state.form.fecha == null ||\n      this.state.form.nombre == \"\" ||\n      this.state.form.apellido == \"\" ||\n      this.state.form.fecha == \"\"\n    ) {\n      this.setState({ btn: true });\n    } else {\n      this.setState({ btn: false });\n    }\n  };\n\n  componentDidMount() {\n    this.peticionGet();\n  }\n\n  render() {\n    const { form } = this.state;\n    return (\n      <div className=\"App\">\n        <br />\n        <h1>MDPConsulting Clientes CRUD</h1>\n        <br />\n        <br />\n        <div class=\"row\">\n          <div class=\"col-sm-12\">\n            edad promedio: <b class=\"promedio\">{this.state.promedio}</b>\n          </div>\n        </div>\n        <br />\n        <br />\n        <table className=\"table \">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Nombre</th>\n              <th>Apellido</th>\n              <th>Fecha de Nacimiento</th>\n              <th>\n                <button\n                  className=\"btn btn-success\"\n                  onClick={() => {\n                    this.setState({ form: null, tipoModal: \"insertar\" });\n                    this.modalInsertar();\n                  }}\n                >\n                  <b>Agregar Cliente</b>\n                </button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.data.map((cliente, index) => {\n              const fec = cliente.cli_fec_nac.split(\"T\");\n              const fecha = fec[0].split(\"-\");\n              return (\n                <tr key=\"{index}\">\n                  <td>{cliente.cli_id}</td>\n                  <td>{cliente.cli_nom}</td>\n                  <td>{cliente.cli_ape}</td>\n                  <td>{fecha[2] + \"/\" + fecha[1] + \"/\" + fecha[0]}</td>\n                  <td>\n                    <button\n                      className=\"btn btn-primary\"\n                      onClick={() => {\n                        this.seleccionarCliente(cliente);\n                        this.modalInsertar();\n                      }}\n                    >\n                      <FontAwesomeIcon icon={faEdit} />\n                    </button>\n                    {\"   \"}\n                    <button\n                      className=\"btn btn-danger\"\n                      onClick={() => {\n                        this.seleccionarCliente(cliente);\n                        this.setState({ modalEliminar: true });\n                      }}\n                    >\n                      <FontAwesomeIcon icon={faTrashAlt} />\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <Modal isOpen={this.state.modalInsertar}>\n          <ModalHeader style={{ display: \"block\" }}>\n            <span\n              style={{ float: \"right\" }}\n              onClick={() => this.modalInsertar()}\n            >\n              x\n            </span>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\"form-group\">\n              <label htmlFor=\"id\">ID</label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                name=\"id\"\n                cli_id=\"id\"\n                readOnly\n                onChange={this.handleChange}\n                value={form ? form.id : \"\"}\n              />\n              <br />\n              <label htmlFor=\"cli_nom\">Nombre</label>\n              <input\n                required\n                className=\"form-control\"\n                type=\"text\"\n                name=\"nombre\"\n                cli_id=\"nombre\"\n                onChange={this.handleChange}\n                value={form ? form.nombre : \"\"}\n              />\n              <br />\n              <label htmlFor=\"cli_ape\">Apellido</label>\n              <input\n                required\n                className=\"form-control\"\n                type=\"text\"\n                name=\"apellido\"\n                cli_id=\"apellido\"\n                onChange={this.handleChange}\n                value={form ? form.apellido : \"\"}\n              />\n              <br />\n              <label htmlFor=\"cli_fec_nac\">Fecha de Nacimiento</label>\n              <input\n                required\n                className=\"form-control\"\n                type=\"date\"\n                name=\"fecha\"\n                cli_id=\"fecha\"\n                onChange={this.handleChange}\n                value={form ? form.fecha : \"\"}\n              />\n            </div>\n          </ModalBody>\n\n          <ModalFooter>\n            {this.state.tipoModal == \"insertar\" ? (\n              <button\n                id=\"btnInsertar\"\n                className=\"btn btn-success\"\n                onClick={() => this.peticionPost()}\n                disabled={this.state.btn}\n              >\n                Insertar\n              </button>\n            ) : (\n              <button\n                id=\"btnInsertar\"\n                className=\"btn btn-primary\"\n                onClick={() => this.peticionPut()}\n                disabled={this.state.btn}\n              >\n                Actualizar\n              </button>\n            )}\n\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => this.modalInsertar()}\n            >\n              Cancelar\n            </button>\n          </ModalFooter>\n        </Modal>\n\n        <Modal isOpen={this.state.modalEliminar}>\n          <ModalBody>\n            ¿Deseas eliminar al cliente {form && form.nombre}?\n          </ModalBody>\n          <ModalFooter>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => this.peticionDelete()}\n            >\n              Sí\n            </button>\n            <button\n              className=\"btn btn-secundary\"\n              onClick={() => this.setState({ modalEliminar: false })}\n            >\n              No\n            </button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}